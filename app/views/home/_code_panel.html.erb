<script src="/javascripts/codemirror-2.13/lib/codemirror.js"></script>
<link rel="stylesheet" href="/javascripts/codemirror-2.13/lib/codemirror.css">
<script src="/javascripts/codemirror-2.13/mode/javascript/javascript.js"></script>
<link rel="stylesheet" href="/javascripts/codemirror-2.13/theme/default.css">
<link rel="stylesheet" href="/javascripts/codemirror-2.13/theme/night.css">
<link rel="stylesheet" href="/javascripts/codemirror-2.13/theme/elegant.css">
<link rel="stylesheet" href="/javascripts/codemirror-2.13/theme/neat.css">

<script src="/javascripts/sylvester.js"></script>
<script src="/javascripts/jquery.hive.js"></script>
<script src="/javascripts/hfc_runner/hfc_runner.js"></script>
<script src="/javascripts/thumbnailer.js"></script>
<script src="/javascripts/three.js/build/Three.js"></script>

<style>
	.CodeMirror {
		background-color: #F0F0F0;
	}
</style>
	
<script type="text/javascript">

	// Startup
	//================================================================================================================================

	var codeMirrorGlobal = null;
	var codeMirrorStart = null;
	var codeMirrorLoop = null;
	var codeCurrentProgramName = "Un-named";
	var codeCurrentProgramId = 0;
	var codeCurrentProgramVersionNumber = 0;
	var codeCurrentProgramVersionCount = 0;
	var codeHfcRunner = HfcRunner;
	var codeCanvasW = 350;
	var codeCanvasH = 350;
	var codeGlobals = [];
	var codeGlobalsReqestedLoad = [];
	var codeGlobalsEditting = "";
	var codeTwiddlers = {};
	var codeTwiddlerChecks = {};
	var codeTwiddlersByCanvas = false;
	var codeSvg = null;
	
	$(document).ready( function() {
		$("#codeGlobalCodeDivDrag").mousedown( function(event) {
			$("body").mousemove( function(event) {
				var top = $("#codeGlobalCodeDiv").offset().top;
				$("#codeGlobalCodeDiv").css( "height", event.pageY - top );
				$("#codeGlobalEditor").css( "height", event.pageY - top - 30 );
				$(codeMirrorGlobal.getScrollerElement()).css( "height", event.pageY - top - 30 );
				codeResize();
			});
			$("body").mouseup( function() {
				$(this).unbind( "mousemove" );
			});
		});
		
		$("#codeStartCodeDivDrag").mousedown( function(event) {
			$("body").mousemove( function(event) {
				var top = $("#codeStartCodeDiv").offset().top;
				$("#codeStartCodeDiv").css( "height", event.pageY - top );
				$("#codeStartEditor").css( "height", event.pageY - top - 30 );
				$(codeMirrorStart.getScrollerElement()).css( "height", event.pageY - top - 30 );
				codeResize();
			});
			$("body").mouseup( function() {
				$(this).unbind( "mousemove" );
			});
		});
	
		$("#codeLoopCodeDivDrag").mousedown( function(event) {
			var top = $("#codeLoopCodeDiv").offset().top;
			$("body").mousemove( function(event) {
				$("#codeLoopCodeDiv").css( "height", event.pageY - top );
				$("#codeLoopEditor").css( "height", event.pageY - top - 20 );
				$(codeMirrorLoop.getScrollerElement()).css( "height", event.pageY - top - 30 );
				codeResize();
			});
			$("body").mouseup( function() {
				$(this).unbind( "mousemove" );
			});
		});
	
		var codeMirrorOptions = {
			enterMode:"keep",
			tabMode:"shift",
			indentUnit:4,
			matchBrackets:true,
			electricChars:false,
			mode:{name:"javascript"},
			lineNumbers:true,
			theme:"neat",
			onKeyEvent: function( inst, evt ) {
				if( evt.ctrlKey && evt.keyCode == 83 ) {
					codeSave();
					evt.preventDefault();
				}				
			}
		}
		codeMirrorGlobal = CodeMirror.fromTextArea( document.getElementById("codeGlobalEditor"), codeMirrorOptions );
		codeMirrorStart  = CodeMirror.fromTextArea( document.getElementById("codeStartEditor" ), codeMirrorOptions );
		codeMirrorLoop   = CodeMirror.fromTextArea( document.getElementById("codeLoopEditor"  ), codeMirrorOptions );
	
		var startCode = getCookie( "startCode" );
		if( startCode )  {
			codeMirrorStart.setValue( startCode );
		}
		var loopCode = getCookie( "loopCode" );
		if( loopCode )  {
			codeMirrorLoop.setValue( loopCode );
		}
	
		codeHfcRunner.init({
			canvasId0: "codeMainCanvas0",
			canvasId1: "codeMainCanvas1",
			frameCallback: function(fps) {
				$("#codeFps").html( fps.toFixed(0) );
			},
			errorStateCallback: codeSetErrorState,
			sizeCallback: function( w, h ) {
				codeCanvasW = w;
				codeCanvasH = h;
				codeResize();
			},
			fetchGlobalCallback: function( name ) {
				if( ! codeGlobalsReqestedLoad[name] ) {
					codeGlobalsReqestedLoad[name] = true;
					$.get( "/globals/"+name, function(data) {
						if( data.success ) {
							codeHfcRunner.updateGlobal( data.name, data.name + " = " + data.code );
						}
					});
				}
			},
			svgCallback: function( svg ) {
				$("#codeHasSVG").css( "display", "block" );
				codeSVG = svg;
			}
		}); 
	
		$(codeMirrorGlobal.getInputField()).keyup( function(e) { codeRestart() } );
		$(codeMirrorStart .getInputField()).keyup( function(e) { codeRestart() } );
		$(codeMirrorLoop  .getInputField()).keyup( function(e) { codeRestart() } );
	
		$(window).resize( codeResize );
	});
	
	function codeTabSelected() {
		codeResize();
		if( codeMirrorStart ) {
			// If ready has already run
			codeRestart();
		}
	}
	
	function codeTabUnselected() {
		codeStop();
	}
	
	function codeResize() {
		// ARRANGE all the divs
		var pageW = $(window).width();
		var pageH = $(window).height();
		var mcTop = $("#codeMainPanel").offset().top;
		var h = pageH - mcTop - 25;
		
		$("#codeMainPanel").css( "position", "relative" );
		$("#codeMainPanel").css( "width", "100%" );
		$("#codeMainPanel").css( "height", h );
		
		var mainW = $("#codeMainPanel").width() - 20;  // 20 for the scroll bar
		var spacing = 5;
		var col3W = codeTwiddlersByCanvas ? 250 : 0;
		var col2W = Math.max( 250, codeCanvasW );
		var col1W = mainW - col2W - spacing - col3W - spacing;
		var col1L = 0;
		var col2L = col1L + col1W + spacing;
		var col3L = col1L + col1W + spacing + col2W + spacing;
	
		$("#codeMainCol1").css( "position", "absolute" );
		$("#codeMainCol1").css( "width", col1W );
		$("#codeMainCol1").css( "height", h );
		$("#codeMainCol1").css( "left", col1L );
		
		$("#codeMainCol2").css( "position", "absolute" );
		$("#codeMainCol2").css( "width", col2W );
		$("#codeMainCol2").css( "height", h );
		$("#codeMainCol2").css( "left", col2L );
	
		$("#codeMainCol3").css( "position", "absolute" );
		$("#codeMainCol3").css( "width", col3W );
		$("#codeMainCol3").css( "height", h );
		$("#codeMainCol3").css( "left", col3L );
	
		$(".codeEditor").css( "width", col1W - 6 ); // Not sure what's up with this exta 6 pixels.  Only seems nec. under chrome
	
		$( "#codeCanvasContainer" ).css( "width", codeCanvasW );
		$( "#codeCanvasContainer" ).css( "height", codeCanvasH );
		
		if( codeMirrorStart ) {
			codeMirrorStart.refresh();
		}
		if( codeMirrorLoop ) {
			codeMirrorLoop.refresh();
		}
		if( codeMirrorGlobal ) {
			codeMirrorGlobal.refresh();
		}
	}
	
	function codeLoad( id, versionNumber ) {
		if( typeof(versionNumber) == "undefined" ) {
			versionNumber = -1;
		}
		$.get( "/programs/"+id, { version:versionNumber }, function(data) {
			codeHidePrograms();
		
			if( data.success ) {
				codeCurrentProgramIsNew = false;
				codeCurrentProgramName = data.name;
				codeCurrentProgramId = data.id;
				$("#codeCurrentProgramName").html( codeCurrentProgramName );
				$("#codeAuthor").html( data.author_name );
				codeMirrorStart.setValue( data.start_code ? data.start_code : "" );
				codeMirrorLoop.setValue( data.loop_code ? data.loop_code : "" );
				codeCurrentProgramVersionNumber = data.version;
				codeCurrentProgramVersionCount = data.version_count;
				$("#codeVersionNumber").html( (data.version+1) + " of " + data.version_count );
				setCookie( "lastLoadedProgramId", data.id );
				
				// SETUP the editors based on how many lines of code there and the screen size
				var startLines = data.start_code.split( "\n" ).length;
				var startEditorSize = Math.min( 300, Math.max( 100, startLines*20 ) ); 
				$("#codeStartCodeDiv").css( "height", startEditorSize );
				$("#codeStartEditor").css( "height", startEditorSize-30 );
				$(codeMirrorStart.getScrollerElement()).css( "height", startEditorSize-30 );
	
				// SETUP the loop editor to take the rest of the screen
				var pageH = $(window).height();
				var mcTop = $("#codeMainPanel").offset().top;
				var h = pageH - mcTop - 25;
				var top = $(codeMirrorLoop.getScrollerElement()).offset().top;
				var loopEditorSize = pageH - top - 30;
				$("#codeLoopCodeDiv").css( "height", loopEditorSize );
				$("#codeLoopEditor").css( "height", loopEditorSize-30 );
				$(codeMirrorLoop.getScrollerElement()).css( "height", loopEditorSize-30 );
				
				codeResize();
				codeResizeCanvasToDefault();
				codeRestart();
			}
			else {
				//alert( data.error );
				delCookie( "lastLoadedProgramId" );
			}
		});
	}
	
	function codeGoto( id ) {
		document.location = "/run/"+id;
	}
	
	// Running program
	//================================================================================================================================

	function codeRestart() {
		// PARSE for twiddlers
		$("#codeTwiddlers").html( "<tr><td><b>Name</b></td><td><b>Value</b></td></tr>" );
		$("#codeCreateATwiddlerNote").css( "display", "block" );
		codeTwiddlers = [];
		var startCode = codeMirrorStart.getValue();
		var lines = startCode.split( "\n" );
		var twiddlerCount = 0;
		for( var i in lines ) {
			var m = lines[i].match( "^(_\\S+)\\s*=\\s*(\\S+)" )
			if( m ) {
				$("#codeCreateATwiddlerNote").css( "display", "none" );
				codeTwiddlers[m[1]] = m[2];
				$("#codeTwiddlers").append( "<tr><td>"+m[1]+"</td><td><input class='twiddler' style='width:80px;' varName='"+m[1]+"' type='text' id='" + m[1] + "' value='"+m[2]+"'></td></tr>" );
				twiddlerCount++;
			}
		}
		if( twiddlerCount > 0 ) {
			$("#codeTwiddlers").prepend( "<tr><td colspan='2'>Click and drag mouse up and down on field to change value</td></tr>" );
		}
		else {
			codeTwiddlersClear();
		}
		
		// SETUP the twiddlers
		$(".twiddler").mousedown( function(event) {
			var startVal = Number( $(this).val() );
			startVal = Math.max( 0.001, startVal );
			var startY = Number( event.pageY );
			var varName = $(this).attr( "varName" );
			var deThis = this;
			$("body").mousemove( function(event) {
				var newVal = Number( startVal * Math.exp( (startY - event.pageY)/50 ) );
				newVal = newVal.toPrecision( 4 );
				$(deThis).val( newVal );
				codeTwiddlers[varName] = newVal;
				codeSetVarFromTwiddler( varName );
			});
			$("body").mouseup( function() {
				$(this).unbind( "mousemove" );
			});
		});
	
		$(".twiddler").change( function(event) {
			var varName = $(this).attr( "varName" );
			codeTwiddlers[varName] = $(this).val();
			codeSetVarFromTwiddler( varName );
		});
		
		$(".twiddlerRestartCheck").change( function(event) {
			codeTwiddlerChecks[ $(this).attr( "varName" ) ] = $(this).attr( "checked" ); 
		});
		
		if( codeGlobalsEditting ) {
			codeHfcRunner.updateGlobal( codeGlobalsEditting, codeMirrorGlobal.getValue() );
		}

		$("#codeHasSVG").css( "display", "none" );
		
		codeHfcRunner.restart( codeMirrorStart.getValue(), codeMirrorLoop.getValue(), [], codeTwiddlers );
	}
	
	function codeStop() {
		codeHfcRunner.stop();
	}
	
	function codeSetPause( pause ) {
		if( !pause && codeHfcRunner.isPaused() ) {
			$("#codePauseLink").html( "pause" );
			codeHfcRunner.setPaused(false);
		}
		else if( pause && !codeHfcRunner.isPaused() ) {
			$("#codePauseLink").html( "run" );
			codeHfcRunner.setPaused(true);
		}
	}
	
	function codeTogglePause() {
		if( codeHfcRunner.isPaused() ) {
			$("#codePauseLink").html( "pause" );
			codeHfcRunner.setPaused(false);
		}
		else {
			$("#codePauseLink").html( "run" );
			codeHfcRunner.setPaused(true);
		}
	}
	
	function codeSetErrorState( blockName, exceptMessage, exceptLine ) {
		var header = "";	
		if( blockName == "Start code" ) {
			header = exceptLine ? ("Line "+exceptLine+": ") : ""
			div = "codeStartCodeErrorState";
		}
		else if( blockName == "Loop code" ) {
			header = exceptLine ? ("Line "+exceptLine+": ") : ""
			div = "codeLoopCodeErrorState";
		}
		else {
			header = blockName + ": " + (exceptLine ? (" line "+exceptLine+": ") : "");
			div = "codeMasterErrorState";
		}
	
		if( exceptMessage ) {
			$("#"+div).html( header + exceptMessage );
		}
		else {
			$("#"+div).html( "" );
		}
	}
	
	function codeResizeCanvasToDefault() {
		codeHfcRunner.resizeCanvasToDefault();
	}
	
	// Load & Save
	//================================================================================================================================

	function codeNew() {
		// CLEAR the editors
		codeMirrorGlobal.setValue("");
		codeMirrorStart.setValue("");
		codeMirrorLoop.setValue("");
		codeCurrentProgramId = 0;
		codeCurrentProgramName = "Un-named";
		$("#codeCurrentProgramName").html( codeCurrentProgramName );
		codeCurrentProgramVersionNumber = 0;
		codeCurrentProgramVersionCount = 0;
		$("#codeVersionNumber").html( "" );
		codeTwiddlersClear();
		codeStop();
	}
		
	function codeLoadPreviousVersion() {
		codeLoad( codeCurrentProgramId, Math.max(0,codeCurrentProgramVersionNumber-1) )
	}
	
	function codeLoadNextVersion() {
		codeLoad( codeCurrentProgramId, codeCurrentProgramVersionNumber+1 )
	}
	
	function codeLoadLatestVersion() {
		codeLoad( codeCurrentProgramId )
	}
	
	function codeSaveCanvas() {
		var data = document.getElementById( "codeMainCanvas0" ).toDataURL( "image/png" );
		window.open( data );
	}
	
	function codeSaveCanvasAsSVG() {
		var form = "<form action='/assets/return_as_file' method='post'><input type='hidden' name='filename' value='file.svg'><input type='hidden' name='data' value='"+escape(codeSVG)+"'></form>"
		jQuery(form).appendTo("body").submit().remove();
	}
	
	function codeResizeImage(url, width, height, callback) {
	    var sourceImage = new Image();
	    sourceImage.onload = function() {
	        // Create a canvas with the desired dimensions
	        var canvas = document.createElement("canvas");
	        canvas.width = width;
	        canvas.height = height;
	
			thumbnailer( canvas, sourceImage, 32, 8 );
	
	        // Scale and draw the source image to the canvas
	        //canvas.getContext("2d").drawImage(sourceImage, 0, 0, width, height);
	
	        // Convert the canvas to a data URL in PNG format
	        callback(canvas.toDataURL());
	    }
	
	    sourceImage.src = url;
	}
	
	function codeSave() {
		if( codeCurrentProgramName == "Un-named" ) {
			codeSaveAs();
		}
		else {
			var data = document.getElementById( "codeMainCanvas0" ).toDataURL( "image/png" );
			codeResizeImage( data, 45, 45, function(resizedData) {
				$.ajax({
					type: "PUT",
					url: "/programs/"+codeCurrentProgramId,
					data:{name:codeCurrentProgramName, loop_code:codeMirrorLoop.getValue(), start_code:codeMirrorStart.getValue(), icon:resizedData },
					success:function(data) {
						if( data.success ) {
							codeCurrentProgramId = data.id;
							codeCurrentProgramName = data.name;
							$("#codeCurrentProgramName").html( codeCurrentProgramName );
							$("#codeAuthor").html( data.author_name );
							codeCurrentProgramVersionNumber = 0;
							codeCurrentProgramVersionCount = data.version_count;
							$("#codeVersionNumber").html( (data.version_count-codeCurrentProgramVersionNumber) + " of " + data.version_count );
						}
						else {
							alert( data.error );
							codeCurrentProgramName = "Un-named";
						}
					}
				});
			});
	
		}
	}
	
	function codeSaveAs() {
		codeCurrentProgramId = 0;
		$("#codeSaveAsName").val( codeCurrentProgramName );
		$("#codeMainControlPanel").css( "display", "none" );
		$("#codeSaveAsControlPanel").css( "display", "block" );
	}
	
	function codeSaveAsOk() {
		$("#codeMainControlPanel").css( "display", "block" );
		$("#codeSaveAsControlPanel").css( "display", "none" );
		codeCurrentProgramName = $("#codeSaveAsName").val();
		codeSave();
	}
	
	function codeSaveAsCancel() {
		$("#codeMainControlPanel").css( "display", "block" );
		$("#codeSaveAsControlPanel").css( "display", "none" );
	}
	
	function codeLoginToSave() {
		setCookie( "startCode", codeMirrorStart.getValue() );
		setCookie( "loopCode", codeMirrorLoop.getValue() );
		setCookie( "lastLoadedProgramId", "" )
		document.location = "/login";
	}
	
	// Load page
	//================================================================================================================================

	function codeSetupLoadHover() {
		$(".codeLoadName").hover(
			function(e) {
				var id = $(e.target).attr("programId");
				$("#codePreview").attr( "src", "/embed/"+id );
				$("#codePreviewContainer").css( "visibility", "visible" );
				var pageW = $(window).width();
				if( e.pageX < pageW/2 ) {
					$("#codePreviewContainer").css( "right", "0" );
					$("#codePreviewContainer").css( "left", "" );
				}
				else {
					$("#codePreviewContainer").css( "right", "" );
					$("#codePreviewContainer").css( "left", "0" );
				}  
			},
			function(e) {
				var id = $(e.target).attr("programId");
				$("#codePreview").attr( "src", "" );
				$("#codePreviewContainer").css( "visibility", "hidden" );
			}
		);
	}
	
	function codeShowPrograms() {
		codeSetPause( true );
		$("#codeProgramsPanel").load( "/programs/programs_and_friends_panel", function() {
			codeSetupLoadHover();
			commonSetupElements();
		});
		$("#codeProgramsPanel").css( "display", "block" );
		$("#codeProgramsControlPanel").css( "display", "block" );
		$("#codeMainPanel").css( "display", "none" );
		$("#codeMainControlPanel").css( "display", "none" );
	}
	
	function codeHidePrograms() {
		codeSetPause( false );
		$("#codeProgramsPanel").css( "display", "none" );
		$("#codeProgramsControlPanel").css( "display", "none" );
		$("#codeMainPanel").css( "display", "block" );
		$("#codeMainControlPanel").css( "display", "block" );
	}
	
	function codeFriendAddByTextField() {
		$("#codeProgramsErrors").html( "" );
		var name = $("#codeFriendAddName").val();
		$.post( "/friends", {name:name}, function(data) {
			if( data.success ) {
				codeShowPrograms();
			}
			else {
				$("#codeProgramsErrors").html( data.error );
			}
		});
	}
	
	function codeFriendDeleteById( id ) {
		if( confirm( "Are you sure you want to un-friend this user?" ) ) {
			$.ajax({
				url: "/friends/"+id,
				type: "DELETE",
				success: function(data) {
					if( data.success ) {
						codeShowPrograms();
					}
					else {
						alert( data.error );
					}
				},
				error: function() {
					alert( "delete failed" );
				}
				
			});
		}
	}
	
	function codeDeleteById( programId ) {
		if( confirm( "Are you sure you want to delete this program?" ) ) {
			$.ajax({
				url: "/programs/"+programId,
				type: "DELETE",
				success: function(data) {
					if( data.success ) {
						codeShowPrograms();
					}
					else {
						alert( data.error );
					}
				},
				error: function() {
					alert( "delete failed" );
				}
			});
		}
	}
	
	function codeProgramsByUser(userId) {
		$("#codeProgramsByUser").load( "/programs/programs_by_user_id/"+userId, codeSetupLoadHover );
	}
	
	// Twiddlers
	//================================================================================================================================

	function codeSetVarFromTwiddler( varName ) {
		var startCode = codeMirrorStart.getValue();
		var lines = startCode.split( "\n" );
		for( var i in lines ) {
			var m = lines[i].match( "^(_\\S+)\\s*=\\s*(\\S+)" )
			if( m ) {
				for( var j in codeTwiddlers ) {
					if( j == m[1] ) {
						lines[i] = "" + m[1] + " = " + codeTwiddlers[j];
						break;
					}
				}
			}
		}
		var newStr = lines.join( "\n" );
		codeMirrorStart.setValue( newStr );
		if( $("#"+varName+"_restart").attr( "checked" ) ) {
			codeRestart();
		}
	}
	
	function codeTwiddlersClear() {
		$("#codeTwiddlers").html("Start a variable with underscore to create a twiddler");
	}
	
	// Globals
	//================================================================================================================================
	
	function codeShowGlobals() {
		$("#codeGlobalsPanel").load( "/globals", commonSetupElements );
		$("#codeGlobalsPanel").css( "display", "block" );
		$("#codeGlobalsControlPanel").css( "display", "block" );
		$("#codeMainPanel").css( "display", "none" );
		$("#codeMainControlPanel").css( "display", "none" );
	}
	
	function codeHideGlobals() {
		$("#codeGlobalsPanel").css( "display", "none" );
		$("#codeGlobalsControlPanel").css( "display", "none" );
		codeMirrorGlobal.refresh();
		$("#codeMainPanel").css( "display", "block" );
		$("#codeMainControlPanel").css( "display", "block" );
	}
	
	function codeShowGlobalEditor() {
		$("#codeGlobalCodeDiv").slideDown();
		$("#codeGlobalCodeDivDrag").slideDown();
	}
	
	function codeHideGlobalEditor() {
		$("#codeGlobalCodeDiv").slideUp();
		$("#codeGlobalCodeDivDrag").slideUp();
	}
	
	function codeSaveGlobal() {
		if( codeGlobalsEditting == "" ) {
			var code = codeMirrorGlobal.getValue();
			var lines = code.split( "\n" );
			for( var i in lines ) {
				var line = lines[i];
				var m = line.match( /^\s*(\$[A-Za-z0-9_]+)\s*=\s*function/ );
				if( m ) {
					codeGlobalsEditting = m[1];
					break;
				}
			}
		}
		if( codeGlobalsEditting == "" ) {
			alert( "You must name a global function with a $" );
		}
		else {
			$.ajax({
				url:"/globals/"+codeGlobalsEditting,
				type:"PUT",
				data:{ code:codeMirrorGlobal.getValue() },
				success: function(data) {
					if( data.success ) {
						codeHideGlobalEditor();
					}
				}
			});
		}
	}
	
	function codeCancelGlobal() {
		codeHideGlobalEditor();
	}
	
	function codeGlobalEdit( name, version ) {
		if( typeof(version) == "undefined" ) {
			version = -1;
		}
		$.get( "/globals/"+name, {version:version}, function(data) {
			if( data.success ) {
				codeShowGlobalEditor();
				codeMirrorGlobal.setValue( data.name + " = " + data.code );
				codeMirrorGlobal.refresh();
				codeHideGlobals();
				codeGlobalsEditting = data.name;
				$("#codeGlobalVersionLabel").html( (data.version+1) + " of " + data.version_count );
				codeGlobalVersionNumber = data.version;
			}
		});
	}
	
	function codeNewGlobal() {
		codeShowGlobalEditor();
		codeMirrorGlobal.setValue( "" );
		codeMirrorGlobal.refresh();
		codeHideGlobals();
		codeGlobalsEditting = "";
		$("#codeGlobalVersionLabel").html( "0 of 0" );
		codeGlobalVersionNumber = -1;
	}
	
	function codeGlobalPreviousVersion() {
		codeGlobalEdit( codeGlobalsEditting, codeGlobalVersionNumber-1 );
	}
	
	function codeGlobalNextVersion() {
		codeGlobalEdit( codeGlobalsEditting, codeGlobalVersionNumber+1 );
	}
	
	function codeGlobalLatestVersion() {
		codeGlobalEdit( codeGlobalsEditting, -1 );
	}
	
	function codeGlobalDeleteById( id ) {
		if( confirm( "Are you sure you want to delete this global function?" ) ) {
			$.ajax({
				url:"/globals/"+id,
				type:"DELETE",
				success: function(data) {
					if( data.success ) {
						codeShowGlobals();
					}
					else {
						alert( data.error );
					}
				}
			});
		}
	}

	// Misc UI
	//================================================================================================================================

	function codeHowToEmbed() {
		if( codeCurrentProgramId > 0 ) {
			alert( "To embed this program on another web page, copy and paste the following:\n\n<iframe style='width:350px; height:350px;' src='http://www.happyfuncoding.com/embed/"+codeCurrentProgramId+"' scrolling='no' frameborder='0'></iframe>" );
		}
		else {
			alert( "Load or save a program first and then press this link to discover the embed code." );
		}
	}
	
	function codeMoveTwiddlers() {
		if( codeTwiddlersByCanvas ) {
			codeTwiddlersByCanvas = false;
			$("#codeMoveTwiddelerPanelMessage").html( "Move this panel to side of canvas" );
			$("#codeMainCol2").append( $("#codeTwiddlersArea") );
		}
		else {
			codeTwiddlersByCanvas = true;
			$("#codeMoveTwiddelerPanelMessage").html( "Move this panel below canvas" );
			$("#codeMainCol3").append( $("#codeTwiddlersArea") );
		}
		codeResize();
	}
	
</script>



<div id="codeControlPanel" class="controlPanel">
	<div id="codeMainControlPanel">
		Current program: <span id="codeCurrentProgramName" style="font-weight:bold;">Un-named</span> by <span id="codeAuthor"></span>

		<button onclick="codeNew()">
			New
		</button>
		
		<button onclick="codeShowPrograms()">
			Load
		</button>
		
		<% if User.current_user %>

			<button onclick="codeSave()">
				Save
			</button>
			
			<button onclick="codeSaveAs()">
				Save As
			</button>
			
			Version <span id="codeVersionNumber" style="font-weight:bold;"></span>:

			<img src="/images/go-previous.svg" style="height:25px; vertical-align:bottom;" onclick="codeLoadPreviousVersion()"/>
			<img src="/images/go-next.svg" style="height:25px; vertical-align:bottom;" onclick="codeLoadNextVersion()"/>
			<img src="/images/go-last.svg" style="height:25px; vertical-align:bottom;" onclick="codeLoadLatestVersion()"/>

			<button onclick="codeShowGlobals()" style="margin-left:30px;">
				Globals
			</button>
			
		<% else %>
		
			<a id="codeLoginToSaveLink" onclick="codeLoginToSave()">Login to save</a>
		
		<% end %>
		
		&nbsp;&nbsp;<a onclick="codeHowToEmbed()">How to embed</a>
	
	</div>

	<div id="codeSaveAsControlPanel" style="display:none;">
		<span class="areaLabel">Save as:</span>
		<input id="codeSaveAsName" type="text" style="width:150px;">
		<button onclick="codeSaveAsOk()">
			Save
		</button>
		<button onclick="codeSaveAsCancel()">
			Cancel
		</button>
	</div>
	
	<div id="codeProgramsControlPanel" style="display:none;">
		<button onclick="codeHidePrograms()">
			Return
		</button>

		<input id="codeFriendAddName" type="text" style="width:150px;"/>
		<button onclick="codeFriendAddByTextField()">
			Add friend
		</button>
		
		Hover over the name of a program to see a preview
		
		<div id="codeProgramsErrors" style="color:red;">
		</div>
	</div>
	
	<div id="codeGlobalsControlPanel" style="display:none;">
		<button onclick="codeHideGlobals()">
			Return
		</button>
		<button onclick="codeNewGlobal()">
			New
		</button>
	</div>
	
</div>

<div id="codeProgramsPanel">
</div>

<div id="codeGlobalsPanel" class="indent10">
</div>

<div id="codeMainPanel" cellpadding="0" cellspacing="5" style="width:100%; overflow-x:hidden; overflow-y:scroll;">

	<div id="codeMainCol1" style="vertical-align:top;">
			
		<div id="codeGlobalCodeDiv" style="display:none;">
			<div style="min-height:20px;">
				<span id="codeMasterErrorState" class="areaLabel" style="background-color:red; color:white;">
				</span>
			</div>
			<div id="codeGlobalControlPanel">
				<span class="areaLabel">
					Global editor
				</span>
				<button onclick="codeSaveGlobal()">Save</button>
				<button onclick="codeCancelGlobal()">Cancel</button>
				<span>
					Version: <span style="font-weight:bold;" id="codeGlobalVersionLabel"></span>
				</span>
				<button onclick="codeGlobalPreviousVersion()">Previous</button>
				<button onclick="codeGlobalNextVersion()">Next</button>
				<button onclick="codeGlobalLatestVersion()">Latest</button>
			</div>
			<textarea id="codeGlobalEditor" class="codeEditor thinBorder" wrap="off" style="white-space:nowrap; overflow:auto; height:100px;"></textarea>
		</div>

		<div id="codeGlobalCodeDivDrag" class="dragBar" style="text-align:center; display:none; height:5px; width:100%; cursor:move;">
			<img src="/images/drag.png"/ style="position:relative; top:3px;">
		</div>

		<div id="codeStartCodeDiv">
			<span class="areaLabel">Start code editor</span>
			<span id="codeStartCodeErrorState" class="areaLabel" style="background-color:red; color:white;"></span>
			<textarea id="codeStartEditor" class="codeEditor thinBorder" wrap="off" style="white-space:nowrap; overflow:auto; height:100px;"></textarea>
		</div>

		<div id="codeStartCodeDivDrag" class="dragBar" style="text-align:center; height:5px; width:100%; cursor:move;">
			<img src="/images/drag.png"/ style="position:relative; top:3px;">
		</div>

		<div id="codeLoopCodeDiv">
			<span class="areaLabel">Loop code editor</span>
			<span id="codeLoopCodeErrorState" class="areaLabel" style="background-color:red; color:white;"></span>
			<textarea id="codeLoopEditor" class="codeEditor thinBorder" wrap="off" style="white-space:nowrap; overflow:auto; height:300px;"></textarea>
		</div>

		<div id="codeLoopCodeDivDrag" class="dragBar" style="text-align:center; display:block; height:5px; width:100%; cursor:move;">
			<img src="/images/drag.png"/ style="position:relative; top:3px;">
		</div>


	</div>

	<div id="codeMainCol2" style="vertical-align:top; height:350px;">
		<div>
			<span class="areaLabel">Canvas</span>

			<span style="float:right; margin-left:20px;">
				<a id="codePauseLink" onclick="codeTogglePause()">pause</a>
			</span>

			<span style="float:right; margin-left:20px;">
				<a onclick="codeSaveCanvas()">snapshot</a>
			</span>

			<span id="codeHasSVG" style="float:right; margin-left:20px;">
				<a onclick="codeSaveCanvasAsSVG()">svg</a>
			</span>

			<span style="float:right;">
				FPS:
				<span id="codeFps"></span>
			</span>

			<% if false %>
				<span style="float:right; min-width:150px;">
					<span id="codePauseWarning" style="font-weight:bold; display:none; background-color:yellow; color:black;">Paused</span>
					<span id="codeInfiniteLoopWarning" style="font-weight:bold; display:none; background-color:yellow; color:black;">Unresponsive (<a onclick="loadPage('unresponsive')">help</a>)</span>
					<span id="codeFpsWarning" style="font-weight:bold; display:none; background-color:yellow; color:black;">Frame rate low, try <a href="http://www.google.com/chrome">Chrome</a></span>
				</span>
			<% end %>

		</div>

		<div id="codeCanvasContainer" style="position:relative;">
			<canvas id="codeMainCanvas0" class="thinBorder" style="background-color:white; position:absolute; left:0; top:0;">
			</canvas>
			<canvas id="codeMainCanvas1" class="thinBorder" style="background-color:white; position:absolute; left:0; top:0;">
			</canvas>
		</div>

		<div id="codeTwiddlersArea" style="padding-top:5px;">
			<div>
				<span class="areaLabel">Twiddlers</span>&nbsp;&nbsp;<span><a onclick="codeMoveTwiddlers()" id="codeMoveTwiddelerPanelMessage">Move this panel to side of canvas</a></span>
			</div>
			<div class="thinBorder grayBackground">
				<div id="codeCreateATwiddlerNote" style="padding:5px 5px 5px 5px;"></div>
				<table id="codeTwiddlers">
				</table>
			</div>
		</div>

		<div id="svgtest">
		</div>
	</div>
	
	<div id="codeMainCol3" style="vertical-align:top;">
	</div>

</div>

